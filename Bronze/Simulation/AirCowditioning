#include <bits/stdc++.h>
using namespace std;
// the better way to do this was to recognize that when listing all of the values of d, and then putting 0 in front of the array and 0 in the back. Taking half of the sum of all of the differences with d[i] and d[i + 1] would give the same answer. Read the editorial on 2021 December Bronze 2. Air Cownditioning if confused
int main() {
	int N;
	cin >> N;
	vector<int> p(N), t(N), d(N);
	for (int i = 0; i < N; ++i)
		cin >> p[i];
	for (int i = 0; i < N; ++i)
		cin >> t[i];
	for (int i = 0; i < N; ++i)
		d[i] = p[i] - t[i];
	int first_nonzero = 0, ans = 0;
	while (true) {
		while (first_nonzero < N && d[first_nonzero] == 0)
			++first_nonzero; // calculating the point of the first non zero number
		if (first_nonzero == N)
			break; // meaning that if all of the numbers are 0, then stop
		int r = first_nonzero; // easier way to write it i guess?
		auto sgn = [&](int x) { // what in the world is this
			if (x < 0)
				return -1;
			if (x > 0)
				return 1;
			return 0;
		};
		while (r + 1 < N && sgn(d[r + 1]) == sgn(d[first_nonzero])) // lost me here
			++r;
		for (int i = first_nonzero; i <= r; ++i) {
			if (d[i] < 0)
				++d[i];
			else
				--d[i];
		}
		++ans;
	}
	cout << ans << "\n";
}
